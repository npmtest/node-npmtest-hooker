{"/home/travis/build/npmtest/node-npmtest-hooker/test.js":"/* istanbul instrument in package npmtest_hooker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hooker/lib.npmtest_hooker.js":"/* istanbul instrument in package npmtest_hooker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_hooker = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_hooker = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-hooker/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-hooker && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_hooker */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_hooker\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_hooker.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_hooker.rollup.js'] =\n            local.assetsDict['/assets.npmtest_hooker.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_hooker.__dirname + '/lib.npmtest_hooker.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-hooker/node_modules/hooker/lib/hooker.js":"/*\n * JavaScript Hooker\n * http://github.com/cowboy/javascript-hooker\n *\n * Copyright (c) 2012 \"Cowboy\" Ben Alman\n * Licensed under the MIT license.\n * http://benalman.com/about/license/\n */\n\n(function(exports) {\n  // Get an array from an array-like object with slice.call(arrayLikeObject).\n  var slice = [].slice;\n  // Get an \"[object [[Class]]]\" string with toString.call(value).\n  var toString = {}.toString;\n\n  // I can't think of a better way to ensure a value is a specific type other\n  // than to create instances and use the `instanceof` operator.\n  function HookerOverride(v) { this.value = v; }\n  function HookerPreempt(v) { this.value = v; }\n  function HookerFilter(c, a) { this.context = c; this.args = a; }\n\n  // When a pre- or post-hook returns the result of this function, the value\n  // passed will be used in place of the original function's return value. Any\n  // post-hook override value will take precedence over a pre-hook override\n  // value.\n  exports.override = function(value) {\n    return new HookerOverride(value);\n  };\n\n  // When a pre-hook returns the result of this function, the value passed will\n  // be used in place of the original function's return value, and the original\n  // function will NOT be executed.\n  exports.preempt = function(value) {\n    return new HookerPreempt(value);\n  };\n\n  // When a pre-hook returns the result of this function, the context and\n  // arguments passed will be applied into the original function.\n  exports.filter = function(context, args) {\n    return new HookerFilter(context, args);\n  };\n\n  // Execute callback(s) for properties of the specified object.\n  function forMethods(obj, props, callback) {\n    var prop;\n    if (typeof props === \"string\") {\n      // A single prop string was passed. Create an array.\n      props = [props];\n    } else if (props == null) {\n      // No props were passed, so iterate over all properties, building an\n      // array. Unfortunately, Object.keys(obj) doesn't work everywhere yet, so\n      // this has to be done manually.\n      props = [];\n      for (prop in obj) {\n        if (obj.hasOwnProperty(prop)) {\n          props.push(prop);\n        }\n      }\n    }\n    // Execute callback for every method in the props array.\n    var i = props.length;\n    while (i--) {\n      // If the property isn't a function...\n      if (toString.call(obj[props[i]]) !== \"[object Function]\" ||\n        // ...or the callback returns false...\n        callback(obj, props[i]) === false) {\n        // ...remove it from the props array to be returned.\n        props.splice(i, 1);\n      }\n    }\n    // Return an array of method names for which the callback didn't fail.\n    return props;\n  }\n\n  // Monkey-patch (hook) a method of an object.\n  exports.hook = function(obj, props, options) {\n    // If the props argument was omitted, shuffle the arguments.\n    if (options == null) {\n      options = props;\n      props = null;\n    }\n    // If just a function is passed instead of an options hash, use that as a\n    // pre-hook function.\n    if (typeof options === \"function\") {\n      options = {pre: options};\n    }\n\n    // Hook the specified method of the object.\n    return forMethods(obj, props, function(obj, prop) {\n      // The original (current) method.\n      var orig = obj[prop];\n      // The new hooked function.\n      function hooked() {\n        var result, origResult, tmp;\n\n        // Get an array of arguments.\n        var args = slice.call(arguments);\n\n        // If passName option is specified, prepend prop to the args array,\n        // passing it as the first argument to any specified hook functions.\n        if (options.passName) {\n          args.unshift(prop);\n        }\n\n        // If a pre-hook function was specified, invoke it in the current\n        // context with the passed-in arguments, and store its result.\n        if (options.pre) {\n          result = options.pre.apply(this, args);\n        }\n\n        if (result instanceof HookerFilter) {\n          // If the pre-hook returned hooker.filter(context, args), invoke the\n          // original function with that context and arguments, and store its\n          // result.\n          origResult = result = orig.apply(result.context, result.args);\n        } else if (result instanceof HookerPreempt) {\n          // If the pre-hook returned hooker.preempt(value) just use the passed\n          // value and don't execute the original function.\n          origResult = result = result.value;\n        } else {\n          // Invoke the original function in the current context with the\n          // passed-in arguments, and store its result.\n          origResult = orig.apply(this, arguments);\n          // If the pre-hook returned hooker.override(value), use the passed\n          // value, otherwise use the original function's result.\n          result = result instanceof HookerOverride ? result.value : origResult;\n        }\n\n        if (options.post) {\n          // If a post-hook function was specified, invoke it in the current\n          // context, passing in the result of the original function as the\n          // first argument, followed by any passed-in arguments.\n          tmp = options.post.apply(this, [origResult].concat(args));\n          if (tmp instanceof HookerOverride) {\n            // If the post-hook returned hooker.override(value), use the passed\n            // value, otherwise use the previously computed result.\n            result = tmp.value;\n          }\n        }\n\n        // Unhook if the \"once\" option was specified.\n        if (options.once) {\n          exports.unhook(obj, prop);\n        }\n\n        // Return the result!\n        return result;\n      }\n      // Re-define the method.\n      obj[prop] = hooked;\n      // Fail if the function couldn't be hooked.\n      if (obj[prop] !== hooked) { return false; }\n      // Store a reference to the original method as a property on the new one.\n      obj[prop]._orig = orig;\n    });\n  };\n\n  // Get a reference to the original method from a hooked function.\n  exports.orig = function(obj, prop) {\n    return obj[prop]._orig;\n  };\n\n  // Un-monkey-patch (unhook) a method of an object.\n  exports.unhook = function(obj, props) {\n    return forMethods(obj, props, function(obj, prop) {\n      // Get a reference to the original method, if it exists.\n      var orig = exports.orig(obj, prop);\n      // If there's no original method, it can't be unhooked, so fail.\n      if (!orig) { return false; }\n      // Unhook the method.\n      obj[prop] = orig;\n    });\n  };\n}(typeof exports === \"object\" && exports || this));\n","/home/travis/build/npmtest/node-npmtest-hooker/node_modules/hooker/child.js":"var path = require('path');\nvar fs = require('fs');\nvar nodeunit = require('nodeunit');\n\nvar filepaths = fs.readdirSync('test').map(function(filename) {\n  return path.join('test', filename);\n});\n\nvar unfinished = {};\nvar currentModule;\nfunction sendMessage(message) {\n  process.stdout.write(JSON.stringify(message) + '\\n');\n}\n\n// If an exception is thrown, let the parent process know and exit.\nprocess.on('uncaughtException', function (e) {\n  sendMessage({error: [e.name, e.message, e.stack]});\n  process.exit();\n});\n\n// If Nodeunit explodes because a test was missing test.done(), handle it.\nvar unfinished = {};\nprocess.on('exit', function (e) {\n  var len = Object.keys(unfinished).length\n  if (len > 0) {\n    sendMessage({exit: ['UNFINISHED']});\n    // process.reallyExit(len);\n  } else {\n    sendMessage({exit: ['finished']});\n  }\n  // process.exit();\n});\n\nnodeunit.reporters.test = {\n  run: function(files, options, callback) {\n    // Nodeunit needs absolute paths.\n    var paths = files.map(function (filepath) {\n      return path.resolve(filepath);\n    });\n    nodeunit.runFiles(paths, {\n      // No idea.\n      testspec: undefined,\n      // Executed when the first test in a file is run. If no tests exist in\n      // the file, this doesn't execute.\n      moduleStart: function(name) {\n        // Keep track of this so that moduleDone output can be suppressed in\n        // cases where a test file contains no tests.\n        currentModule = name;\n        // Send back to the parent process.\n        sendMessage({moduleStart: [name.toString()]});\n      },\n      // Executed after a file is done being processed. This executes whether\n      // tests exist in the file or not.\n      moduleDone: function(name) {\n        // Abort if no tests actually ran.\n        if (name !== currentModule) { return; }\n        // Send back to the parent process.\n        sendMessage({moduleDone: [name.toString()]});\n      },\n      // Executed before each test is run.\n      testStart: function(name) {\n        // Keep track of the current test, in case test.done() was omitted\n        // and Nodeunit explodes.\n        unfinished[name] = name;\n        // Send back to the parent process.\n        sendMessage({testStart: [name.toString()]});\n      },\n      // Executed after each test and all its assertions are run.\n      testDone: function(name, assertions) {\n        delete unfinished[name];\n        // Send back to the parent process.\n        sendMessage({testDone: [\n          name.toString(),\n          assertions.failures(),\n          assertions.map(function(assertion) {\n            var e = assertion.error;\n            if (e) {\n              assertion.error = {\n                name: e.name,\n                message: e.message,\n                stack: e.stack\n              };\n            }\n            return assertion;\n          })\n        ]});\n      },\n      // Executed when everything is all done.\n      done: function (assertions) {\n        // Send back to the parent process.\n        sendMessage({done: [\n          assertions.failures(),\n          assertions.duration,\n          assertions\n        ]});\n      }\n    });\n  }\n}\n\nnodeunit.reporters.test.run(filepaths, {});\n","/home/travis/build/npmtest/node-npmtest-hooker/node_modules/hooker/grunt.js":"/*global config:true, task:true*/\nconfig.init({\n  pkg: '<json:package.json>',\n  meta: {\n    name: 'JavaScript Hooker',\n    banner: '/*! <%= meta.name %> - v<%= pkg.version %> - <%= template.today(\"m/d/yyyy\") %>\\n' +\n            '* <%= pkg.homepage %>\\n' +\n            '* Copyright (c) <%= template.today(\"yyyy\") %> <%= pkg.author.name %>;' +\n            ' Licensed <%= _.pluck(pkg.licenses, \"type\").join(\", \") %> */'\n  },\n  concat: {\n    'dist/ba-hooker.js': ['<banner>', '<file_strip_banner:lib/hooker.js>']\n  },\n  min: {\n    'dist/ba-hooker.min.js': ['<banner>', 'dist/ba-hooker.js']\n  },\n  test: {\n    files: ['test/**/*.js']\n  },\n  lint: {\n    files: ['grunt.js', 'lib/**/*.js', 'test/**/*.js']\n  },\n  watch: {\n    files: '<config:lint.files>',\n    tasks: 'lint:files test:files'\n  },\n  jshint: {\n    options: {\n      curly: true,\n      eqeqeq: true,\n      immed: true,\n      latedef: true,\n      newcap: true,\n      noarg: true,\n      sub: true,\n      undef: true,\n      eqnull: true\n    },\n    globals: {\n      exports: true\n    }\n  },\n  uglify: {}\n});\n\n// Default task.\ntask.registerTask('default', 'lint:files test:files concat min');\n","/home/travis/build/npmtest/node-npmtest-hooker/node_modules/hooker/parent.js":"var spawn = require('child_process').spawn;\n\nfunction loop() {\n  console.log('starting');\n  console.log(this);\n  //var child = spawn('./node_modules/nodeunit/bin/nodeunit', ['test']);\n  var child = spawn('node', ['child.js']);\n  child.stdout.on('data', function(buffer) {\n    process.stdout.write(buffer);\n  });\n  child.on('exit', this.async());\n}\n\nvar context = {\n  async: function() { return loop.bind(context); }\n};\nloop.call(context);"}